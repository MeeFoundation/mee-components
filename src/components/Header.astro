---
import Logo from "./MeeLogo.astro";
import ButtonLink from "./ButtonLink.astro";
import IconButton from "./IconButton.astro";
export interface Props {
  className?: string;
  type?: "default" | "docs" | "dark";
  activePage?: string;
  location?: string;
  header: {
    links: Link[];
    rightLinks: RigthLink[];
    footerLinks: Link[];
    logoLink?: string;
  };
}

interface Link {
  name: string;
  link: string;
  id: string;
  target?: string;
}

interface RigthLink {
  name: string;
  link: string;
  target?: string;
  id?: string;
  icon: string;
}
const {
  className,
  activePage,
  type = "default",
  header,
  location,
} = Astro.props;
---

<div class="relative">
  <header
    id="header"
    class:list={[
      "fixed left-0 top-0 z-300 flex h-27 w-screen items-center justify-center",
      type === "docs" && "border-b border-grey-200",
      type !== "dark" &&
        "menu-bg bg-white backdrop-blur-62.5 transition-all duration-300",
    ]}
    data-type={type}
  >
    <div
      class:list={[
        "header mx-auto flex max-w-7xl items-center justify-between px-5",
        type === "default" && "after-border",
        type !== "dark" && "w-full flex-wrap",
        type === "dark" &&
          "menu-bg-dark gap-10 rounded-2.5xl border border-white/15 py-2 shadow-header backdrop-blur-12.5",
        className,
      ]}
    >
      <div class:list={["flex items-center gap-2", type !== "dark" && "w-1/3"]}>
        <div>
          <a
            id="mainLogo"
            href={header.logoLink ? header.logoLink : "/"}
            class="logo flex h-6 w-20 items-center justify-center"
          >
            <Logo className={type === "dark" ? "!fill-white" : ""} />
          </a>
        </div>
        {
          location && (
            <div class="flex rounded-full border border-brand-300 bg-brand-50 px-1.5 py-0.5 text-sm font-semibold text-brand-700 md:hidden text-nowrap">
              {location}
            </div>
          )
        }
      </div>
      <ul
        class:list={[
          "items-right hidden justify-center gap-2 whitespace-nowrap text-center md:flex",
          type !== "dark" && "w-1/3",
        ]}
      >
        {
          header.links.map((link) => (
            <li
              class:list={[
                "text-base font-semibold text-brand-950",
                type === "dark" && "!text-white/90",
              ]}
            >
              <a
                href={link.link}
                target={link.target}
                class:list={[
                  "rounded-2xl px-4 py-1.5",
                  type !== "dark" && "hover:bg-primary hover:text-white",
                  type === "dark" && "hover:text-white hover:underline",
                  type !== "dark" &&
                    activePage === link.id &&
                    "bg-primary text-white",
                  type === "dark" && activePage === link.id && "text-white",
                ]}
              >
                {link.name}
              </a>
            </li>
          ))
        }
      </ul>
      <div
        class:list={[
          "hidden items-end justify-end gap-3 md:flex",
          type !== "dark" && "w-1/3",
        ]}
      >
        {
          header.rightLinks.map((link) => (
            <ButtonLink
              leftIcon={`${link.icon} text-lg`}
              buttonType="tertiary"
              buttonType={type === "dark" ? "primary" : "tertiary"}
              style={type === "dark" ? "transparent" : "outlined"}
              size="l"
              href={link.link}
              target={link.target}
              className={type === "dark" ? "border-none !text-white/90" : ""}
            >
              {type !== "dark" && link.name}
            </ButtonLink>
          ))
        }
      </div>
      <div
        class:list={[
          "flex items-center justify-end gap-1 md:hidden",
          type !== "dark" && "w-1/3",
        ]}
      >
        {
          !location &&
            header.rightLinks.map((link) => (
              <ButtonLink
                leftIcon={`${link.icon} text-lg`}
                buttonType="tertiary"
                buttonType={type === "dark" ? "primary" : "tertiary"}
                style="transparent"
                size="l"
                href={link.link}
                target={link.target}
                className={
                  type === "dark" ? "border-none !text-white/90" : "border-none"
                }
              />
            ))
        }

        <IconButton
          icon="list"
          buttonType="tertiary"
          style="transparent"
          size="m"
          className={"border-none"}
          className={type === "dark"
            ? "border-none !text-white"
            : "border-none"}
          id="open-menu"
        />
      </div>
    </div>
  </header>
  <div class="relative">
    <div
      class="fixed right-0 top-0 z-300 h-screen w-0 overflow-hidden bg-white transition-all duration-400 md:hidden"
      id="menu"
    >
      <div
        class="flex h-screen w-full flex-col justify-between py-9 text-brand-950"
      >
        <div
          class:list={[
            "mx-auto flex w-full max-w-7xl flex-wrap items-center justify-between px-5",
          ]}
        >
          <a id="mainLogo" href="/" class="logo block h-6 w-20">
            <Logo />
          </a>
          <IconButton
            icon="x-lg"
            size="s"
            buttonType="tertiary"
            style="transparent"
            className="border-none"
            id="close-menu"
          />
        </div>
        <ul class="items-right flex flex-col justify-center gap-4 text-center">
          {
            header.links.map((link) => (
              <li class="text-lg font-semibold">
                <a
                  href={link.link}
                  target={link.target}
                  class:list={[
                    "rounded-2xl px-4 py-1.5",
                    type !== "dark" && "hover:bg-primary hover:text-white",
                    type === "dark" && "hover:text-white hover:underline",
                    type !== "dark" &&
                      activePage === link.id &&
                      "bg-primary text-white",
                    type === "dark" && activePage === link.id && "text-white",
                  ]}
                >
                  {link.name}
                </a>
              </li>
            ))
          }
        </ul>
        <div class="flex flex-col gap-3">
          <ul class="flex flex-row justify-center gap-7 text-center">
            {
              header.rightLinks.map((link) => (
                <li>
                  <a href={link.link} target={link.target}>
                    {link.icon && (
                      <i
                        class:list={[
                          "bi text-3xl font-thin",
                          "bi-" + link.icon,
                        ]}
                      />
                    )}
                  </a>
                </li>
              ))
            }
          </ul>
          <div class="after-border relative h-1"></div>
          <ul
            class="flex flex-row justify-center gap-7 text-center text-grey-700"
          >
            {
              header.footerLinks.map((link) => (
                <li class="text-sm">
                  <a href={link.link} target={link.target}>
                    {link.name}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .after-border:after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    width: 100%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 0%,
      rgb(231, 232, 233) 50%,
      rgba(255, 255, 255, 0) 100%
    );
  }

  .menu-bg-dark {
    background: linear-gradient(
      90.44deg,
      rgba(255, 255, 255, 0.15) 0%,
      rgba(255, 255, 255, 0.05) 99.88%
    );
  }

  .menu-bg {
    background: linear-gradient(
      180deg,
      rgba(255, 255, 255, 0.8) 0%,
      rgba(255, 255, 255, 0.6) 100%
    );
  }
</style>

<script>
  const header = document.getElementById("header") as HTMLElement;
  const headerType = header.dataset.type;
  console.log(headerType);
  const menu = document.getElementById("menu") as HTMLElement;
  const openMenu = document.getElementById("open-menu") as HTMLButtonElement;
  const closeMenu = document.getElementById("close-menu") as HTMLButtonElement;
  if (headerType !== "dark") {
    document.addEventListener("scroll", () => {
      if (window.scrollY > 50) {
        header.classList.remove("h-27");
        header.classList.add("h-17");
      } else {
        header.classList.remove("h-17");
        header.classList.add("h-27");
      }
    });
  }

  openMenu?.addEventListener("click", () => {
    menu.classList.remove("w-0");
    menu.classList.add("w-screen");
  });
  closeMenu?.addEventListener("click", () => {
    menu.classList.add("w-0");
    menu.classList.remove("w-screen");
  });
</script>
