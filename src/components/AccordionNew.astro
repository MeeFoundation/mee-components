---
interface Props {
  id?: string;
  collapse?: boolean;
  icon?: string;
  title: string;
  className?: string;
  style?: "box" | "boxed-list" | "simple-list";
  size?: "lg" | "md" | "sm";
}

const {
  id,
  collapse = true,
  icon,
  title,
  className,
  style = "box",
  size = "md",
} = Astro.props;
---

<div
  id={id}
  class:list={[
    "a-container text-grey-950 dark:text-white/90",
    className,
    style === "box" && "border border-grey-200",
    style === "box" && size === "lg" && "rounded-lg",
    style === "box" && size === "md" && "rounded-md",
    style === "box" && size === "sm" && "rounded",
  ]}
>
  <h2 id={id + "-heading"} class="a-header w-full">
    <div
      class:list={[
        "flex cursor-pointer select-none items-center justify-between px-6",

        size === "lg" && "min-h-23 text-lg",
        size === "md" && "min-h-17 text-base",
        size === "sm" && "min-h-13.5 text-xs",
      ]}
    >
      <div class="flex items-start justify-start gap-3">
        {icon && <i class:list={["bi font-thin", "bi-" + icon]} />}
        {title}
      </div>
      <div class="flex items-start justify-start gap-3">
        <div class="relative">
          <i
            class:list={[
              "bi bi-dash-lg a-chevron absolute transition-all duration-400",
              size === "lg" && "text-xl",
              size === "md" && "text-lg",
              size === "sm" && "text-base",
              collapse ? "rotate-90" : "rotate-0",
            ]}></i>
          <i
            class:list={[
              "bi bi-dash-lg",
              size === "lg" && "text-xl",
              size === "md" && "text-lg",
              size === "sm" && "text-base",
            ]}></i>
        </div>
      </div>
    </div>
  </h2>
  <div
    id={id + "-body"}
    class:list={[
      "a-body overflow-hidden transition-all duration-400 ease-in-out",
      collapse && "h-0",
    ]}
  >
    <div class="data px-6 pb-6 text-base">
      <slot />
    </div>
  </div>
</div>

<script>
  const setAccordionHeight = (parrentAccordion: HTMLElement | Element) => {
    const body = parrentAccordion.querySelector(".a-body") as HTMLElement;
    const data = parrentAccordion.querySelector(".data") as HTMLElement;
    if (!body.classList.contains("h-0")) {
      const dataHeight = data.offsetHeight + "px";
      body.style.height = dataHeight;
      const parent = parrentAccordion.parentElement as HTMLElement;
      checkParentAccordionHeight(parent);
    }
  };
  const checkParentAccordionHeight = (parent: HTMLElement | null) => {
    if (parent) {
      const parrentAccordion = parent.closest(
        ".a-container",
      ) as HTMLElement | null;
      if (parrentAccordion) {
        setTimeout(() => setAccordionHeight(parrentAccordion), 200);
      }
    }
  };

  const accordionContainers = document.querySelectorAll(".a-container");
  accordionContainers.forEach((accordionContainer) => {
    setAccordionHeight(accordionContainer);
    const header = accordionContainer.querySelector(".a-header") as HTMLElement;
    const body = accordionContainer.querySelector(".a-body") as HTMLElement;
    const chevron = accordionContainer.querySelector(
      ".a-chevron",
    ) as HTMLElement;
    const data = accordionContainer.querySelector(".data") as HTMLElement;

    header?.addEventListener("click", () => {
      const parent = accordionContainer.parentElement as HTMLElement;
      const accordions = parent.querySelectorAll(".a-container");

      accordions.forEach((accordion) => {
        const body = accordion.querySelector(".a-body") as HTMLElement;
        const chevron = accordion.querySelector(".a-chevron") as HTMLElement;
        if (
          !body.classList.contains("h-0") &&
          !accordion.isEqualNode(accordionContainer)
        ) {
          body?.classList.add("h-0");
          body.style.height = "0px";
          chevron?.classList.remove("rotate-0");
          chevron?.classList.add("rotate-90");
        }
      });
      const dataHeight = data.offsetHeight + "px";
      if (body?.classList.contains("h-0")) {
        body?.classList.remove("h-0");
        body.style.height = dataHeight;
        chevron?.classList.add("rotate-0");
        chevron?.classList.remove("rotate-90");
      } else {
        body?.classList.add("h-0");
        body.style.height = "0px";
        chevron?.classList.remove("rotate-0");
        chevron?.classList.add("rotate-90");
      }

      checkParentAccordionHeight(parent);
    });
  });
</script>
